# -*- coding: utf-8 -*-
"""2407751_Harshana Bhandari.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18uxFbwr9aAjjk40wtAVTJdCFV27QyDko
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Assignment

# dataset overview
# question no 1
import pandas as pd
file_path = '/content/drive/MyDrive/Assignment/WHR-2024-5CS037.csv'
df = pd.read_csv(file_path)
df_10_columns = df.iloc[:, :10]
print(df_10_columns)

# question no 2
num_rows, num_columns = df.shape
print(f"Number of rows: {num_rows}")
print(f"Number of columns: {num_columns}")

# question no 3
columns_and_types = df.dtypes
# Print the results
print("Columns and their data types:")
print(columns_and_types)

#Basic Statistics
# question no 1
score_mean = df['score'].mean()
print(f"Mean  of Score column: {score_mean}")
score_median = df['score'].median()
print(f"Median of  Score column: {score_median}")
score_std = df['score'].std()
print(f"Standard Deviation of Score column: {score_std}")

# question no 2
highest_score_country = df.loc[df['score'].idxmax(), 'Country name']
print(f"Country with the highest score: {highest_score_country}")

#missing values
# question no 1
missing_values = df.isnull().sum()
print("Number of missing values in each column:")
print(missing_values)

#filtering and sorting
# question no 1
score_greater = df.loc[df['score'] > 7.5, 'Country name']
print(score_greater)

#question no 2
sorted_df = df.sort_values(by='Log GDP per capita', ascending=False)
top10_countries = sorted_df.head(10)
print(top10_countries)

# adding new columns
# question no 1
def categorize_happiness(score):
  if score < 4:
    return 'Low'
  elif 4 <= score <= 6:
    return 'Medium'
  else:
    return 'High'

df['Happiness Category'] = df['score'].apply(categorize_happiness)
print(df)

import matplotlib.pyplot as plt

# Decrease the size by specifying smaller values for width and height
plt.figure(figsize=(8, 6))  # Adjust these values to control the size of the plot

# Create a bar plot for the top 10 countries by happiness score
df_subset = df.head(10)
bar_plot = df_subset.plot(kind='bar', x='Country name', y='score', title='Happiness Score by Country')

# Set axis labels
bar_plot.set_xlabel('Country')
bar_plot.set_ylabel('Happiness Score')

# Show the plot
plt.show()

#Line plot
Unhappiest=df.tail(10)
line_chart = Unhappiest.plot(kind='line', x='Country name', y='score', title='Unhappiest Score Over Time')
line_chart.set_xlabel('Year')
line_chart.set_ylabel('Unhappiest Score')
plt.show()

#histogram
histograms_score = df['score'].hist(edgecolor='black')
histograms_score.set_xlabel('Score')
histograms_score.set_ylabel('Frequency')
plt.show()

#scatter plot
scatter_plot = df.plot(kind='scatter', x='Healthy life expectancy', y='score', title='Healthy Life Expectancy vs Score')
scatter_plot.set_xlabel('Log GDP per capita')
scatter_plot.set_ylabel('Score')
plt.show()

#Problem 2
# question 1 and 2
import pandas as pd
south_asian_countries = ["Afghanistan", "Bangladesh", "Bhutan", "India",
                         "Maldives", "Nepal", "Pakistan", "Sri Lanka"]
df = pd.read_csv('/content/drive/MyDrive/Assignment/WHR-2024-5CS037.csv')
South_asian = df[df['Country name'].isin(south_asian_countries)].copy()
South_asian.to_csv('/content/drive/MyDrive/Assignment/south_asian_countries.csv', index=False)
# task 2
# question 1
South_asian['Composite Score'] = (
    0.40 * South_asian['Log GDP per capita'] +
    0.30 * South_asian['Social support'] +
    0.30 * South_asian['Healthy life expectancy']
)

#question 2
ranked_countries = South_asian.sort_values(by='Composite Score', ascending=False)
print(ranked_countries[['Country name', 'Composite Score']])

# question 3
import matplotlib.pyplot as plt
bar_chart = ranked_countries.plot(kind='bar', color='Black', x='Country name', y='Composite Score', title='Composite Score by Country')
bar_chart.set_xlabel('Country')
bar_chart.set_ylabel('Composite Score')
plt.show()

# Question 4
South_asian['Rank_Composite'] = South_asian['Composite Score'].rank(ascending=False)
South_asian['Rank_Original'] = South_asian['score'].rank(ascending=False)
South_asian_sorted = South_asian.sort_values(by='Composite Score', ascending=False)
plt.figure(figsize=(12, 6))
x = range(len(South_asian_sorted['Country name']))
plt.bar(x, South_asian_sorted['Composite Score'], width=0.4, label='Composite Score', alpha=0.7)
plt.bar([i + 0.4 for i in x], South_asian_sorted['score'], width=0.4, label='Original Score', alpha=0.7)
plt.xticks([i + 0.2 for i in x], South_asian_sorted['Country name'], rotation=45, ha='right')
plt.xlabel("Countries", fontsize=12)
plt.ylabel("Scores", fontsize=12)
plt.title("Comparison of Composite Score and Original Score by Country", fontsize=14)
plt.legend(fontsize=10)

# Adjust layout for better display
plt.tight_layout()

# Show the plot
plt.show()

# task 3 otliner detection
# question 1 and 2
def find_outliers_iqr(data, column):
  Q1 = data[column].quantile(0.25)  # First quartile (25th percentile)
  Q3 = data[column].quantile(0.75)  # Third quartile (75th percentile)
  IQR = Q3 - Q1                     # Interquartile Range
  lower_bound = Q1 - 1.5 * IQR      # Lower bound for outliers
  upper_bound = Q3 + 1.5 * IQR      # Upper bound for outliers

    # Filter rows that are outliers
  outliers = data[(data[column] < lower_bound) | (data[column] > upper_bound)]
  return outliers, lower_bound, upper_bound

# Step 3: Apply the function to identify outliers for 'Original Score' and 'Log GDP per capita'
score_outliers, score_lower, score_upper = find_outliers_iqr(South_asian, 'score')
gdp_outliers, gdp_lower, gdp_upper = find_outliers_iqr(South_asian, 'Log GDP per capita')

# Step 4: Display outliers and thresholds
print("Outliers Based on Original Score:")
print(score_outliers[['Country name', 'score']])

print("\nOutliers Based on Log GDP per Capita:")
print(gdp_outliers[['Country name', 'Log GDP per capita']])

South_asian['Score Outlier'] = (South_asian['score'] < score_lower) | (South_asian['score'] > score_upper)
South_asian['GDP Outlier'] = (South_asian['Log GDP per capita'] < gdp_lower) | (South_asian['Log GDP per capita'] > gdp_upper)

# Step 5: Create the scatter plot
plt.figure(figsize=(10, 6))

# Plotting normal points
plt.scatter(South_asian[~South_asian['Score Outlier']]['Log GDP per capita'],
            South_asian[~South_asian['Score Outlier']]['score'],
            color='blue', label='Normal', s=100)

# Plotting outliers
plt.scatter(South_asian[South_asian['Score Outlier']]['Log GDP per capita'],
            South_asian[South_asian['Score Outlier']]['score'],
            color='red', label='Outlier', s=100)

# Step 6: Customize the plot
plt.title('Scatter Plot: GDP per Capita vs. Score')
plt.xlabel('Log GDP per Capita')
plt.ylabel('Score')
plt.legend(title='Data Points')
plt.grid(True)

# Show the plot
plt.tight_layout()
plt.show()

"""These are countries with scores or GDP values significantly below the regional norms. Examples might include nations experiencing economic challenges, political instability, or social unrest. For instance, countries like Afghanistan may exhibit lower scores due to ongoing conflicts and low economic output."""

#task 4
# question 1
freedom_column = 'Freedom to make life choices'
generosity_column = 'Generosity'
score_column = 'score'

# Step 4: Calculate Pearson correlation between the selected metrics and the Score
freedom_corr = South_asian[freedom_column].corr(South_asian[score_column])
generosity_corr = South_asian[generosity_column].corr(South_asian[score_column])

# Step 5: Display the results
print(f"Pearson correlation between Freedom to Make Life Choices and Score: {freedom_corr:.4f}")
print(f"Pearson correlation between Generosity and Score: {generosity_corr:.4f}")

#task 4
# question 2
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
sns.regplot(x=South_asian[freedom_column], y=South_asian[score_column],
            scatter_kws={'color': 'blue'}, line_kws={'color': 'red'},
            ci=None, marker='o')
plt.title('Freedom to Make Life Choices vs. Score')
plt.xlabel('Freedom to Make Life Choices')
plt.ylabel('Score')
plt.subplot(1, 2, 2)
sns.regplot(x=South_asian[generosity_column], y=South_asian[score_column],
            scatter_kws={'color': 'green'}, line_kws={'color': 'orange'},
            ci=None, marker='o')
plt.title('Generosity vs. Score')
plt.xlabel('Generosity')
plt.ylabel('Score')
plt.tight_layout()
plt.show()



"""The strongest relationship is between Generosity vs score. A correlation of 0.8745 indicates a very strong positive relationship, suggesting that countries where people are more generous tend to have significantly higher happiness scores.
The weakest relationship is between Freedom to make Life choice vs score.A correlation of 0.8005 suggests that greater perceived freedom to make life choices is also strongly associated with higher happiness scores, but slightly less so than generosity.
"""

#task 5
# gap analysis
South_asian['GDP-Score Gap'] = South_asian['Log GDP per capita'] - South_asian['score']
South_asian.to_csv('south_asian_countries.csv', index=False)

# question 2
ascending_order =South_asian.sort_values(by='GDP-Score Gap', ascending=True)
descending_order = South_asian.sort_values(by='GDP-Score Gap', ascending=False)
print("Ranking by GDP-Score Gap (Ascending Order):")
print(ascending_order[['Country name', 'GDP-Score Gap']])
print("\nRanking by GDP-Score Gap (Descending Order):")
print(descending_order[['Country name', 'GDP-Score Gap']])

# question 3
positive_gaps = South_asian.sort_values(by='GDP-Score Gap', ascending=False).head(3)

# Step 4: Sort the DataFrame by GDP-Score Gap in ascending order to find the largest negative gaps
negative_gaps = South_asian.sort_values(by='GDP-Score Gap', ascending=True).head(3)

# Step 5: Combine the top 3 positive and negative gaps into a single DataFrame
highlighted_gaps = pd.concat([positive_gaps[['Country name', 'GDP-Score Gap']],
                              negative_gaps[['Country name', 'GDP-Score Gap']]])

# Step 6: Plot the bar chart
plt.figure(figsize=(10, 6))
plt.bar(highlighted_gaps['Country name'], highlighted_gaps['GDP-Score Gap'], color=['green' if x > 0 else 'red' for x in highlighted_gaps['GDP-Score Gap']])

# Step 7: Add labels and title to the plot
plt.title('Top 3 Positive and Negative GDP-Score Gaps in South Asia', fontsize=16)
plt.xlabel('Country', fontsize=12)
plt.ylabel('GDP-Score Gap', fontsize=12)

# Add a horizontal line at y=0 for better visualization
plt.axhline(0, color='black', linewidth=1)

# Show the plot
plt.show()

#problem 3
# task 1 setup task
import pandas as pd
middle_east_countries = ["Bahrain", "Iran", "Iraq", "Israel", "Jordan","Kuwait", "Lebanon", "Oman", "Palestine", "Qatar", "Saudi Arabia", "Syria","United Arab Emirates","Yemen"]
df = pd.read_csv('/content/drive/MyDrive/Assignment/WHR-2024-5CS037.csv')
Middle_east = df[df['Country name'].isin(middle_east_countries)]
Middle_east.to_csv('middle_east_countries.csv', index=False)
print(Middle_east)

#  descriptive statistics
# Calculate mean and standard deviation for South Asia
sa_mean = South_asian['score'].mean()
sa_std = South_asian['score'].std()

# Calculate mean and standard deviation for Middle East
me_mean = Middle_east['score'].mean()
me_std = Middle_east['score'].std()

# Print results
print(f"South Asia - Mean Score: {sa_mean:.2f}, Standard Deviation: {sa_std:.2f}")
print(f"Middle East - Mean Score: {me_mean:.2f}, Standard Deviation: {me_std:.2f}")

# Determine which region has higher average happiness score
if sa_mean > me_mean:
    print("South Asia has higher happiness scores on average.")
else:
    print("Middle East has higher happiness scores on average.")

# top and bottom performers
import matplotlib.pyplot as plt

# Top and bottom performers
sa_top3 = South_asian.nlargest(3, "score")
sa_bottom3 = South_asian.nsmallest(3, "score")
me_top3 = Middle_east.nlargest(3, "score")
me_bottom3 = Middle_east.nsmallest(3, "score")

# Plot bar charts
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# South Asia
axes[0].bar(sa_top3["Country name"], sa_top3["score"], color="green", label="Top 3")
axes[0].bar(sa_bottom3["Country name"], sa_bottom3["score"], color="red", label="Bottom 3")
axes[0].set_title("South Asia Top and Bottom Performers")
axes[0].set_ylabel("Happiness Score")
axes[0].legend()

# Middle East
axes[1].bar(me_top3["Country name"], me_top3["score"], color="green", label="Top 3")
axes[1].bar(me_bottom3["Country name"], me_bottom3["score"], color="red", label="Bottom 3")
axes[1].set_title("Middle East Top and Bottom Performers")
axes[1].set_ylabel("Happiness Score")
axes[1].legend()

plt.tight_layout()
plt.show()

#metric comparisions
import matplotlib.pyplot as plt
import numpy as np

# Calculate mean values for key metrics in each region
metrics = ['Log GDP per capita', 'Social support', 'Healthy life expectancy']
sa_means = South_asian[metrics].mean()
me_means = Middle_east[metrics].mean()

# Define bar positions
x = np.arange(len(metrics))  # positions for the metrics
bar_width = 0.35

# Create the plot
plt.figure(figsize=(10, 6))

# Bars for South Asia
plt.bar(x - bar_width / 2, sa_means, width=bar_width, label='South Asia', color='blue', alpha=0.7)

# Bars for Middle East
plt.bar(x + bar_width / 2, me_means, width=bar_width, label='Middle East', color='orange', alpha=0.7)

# Add labels and title
plt.xticks(x, metrics, rotation=0, fontsize=10)
plt.xlabel('Metrics', fontsize=12)
plt.ylabel('Mean Values', fontsize=12)
plt.title('Comparison of Key Metrics Between South Asia and Middle East', fontsize=14)
plt.legend(fontsize=10)
plt.grid(axis='y', linestyle='--', alpha=0.6)

# Tight layout for clarity
plt.tight_layout()

# Show the plot
plt.show()

# Identify largest disparity
disparities = abs(sa_means - me_means)
largest_disparity_metric = disparities.idxmax()
print(f"The metric with the largest disparity between the two regions is: {largest_disparity_metric}")

#Happiness Disparity
# Calculate range for South Asia and Middle East
sa_range = South_asian["score"].max() - South_asian["score"].min()
me_range = Middle_east["score"].max() - Middle_east["score"].min()

# Calculate mean and standard deviation for South Asia
sa_mean = South_asian["score"].mean()
sa_std = South_asian["score"].std()

# Calculate mean and standard deviation for Middle East
me_mean = Middle_east["score"].mean()
me_std = Middle_east["score"].std()

# Calculate coefficient of variation (CV) for both regions
sa_cv = sa_std / sa_mean
me_cv = me_std / me_mean

# Display results
print(f"South Asia - Range: {sa_range:.2f}, CV: {sa_cv:.2f}")
print(f"Middle East - Range: {me_range:.2f}, CV: {me_cv:.2f}")

# Identify the region with greater variability
if sa_cv > me_cv:
    print("South Asia has greater variability in happiness.")
else:
    print("Middle East has greater variability in happiness.")

# correlation analysis
import seaborn as sns

# Correlation for South Asia
sa_corr = South_asian[["score", "Freedom to make life choices", "Generosity"]].corr()
me_corr = Middle_east[["score", "Freedom to make life choices", "Generosity"]].corr()

print("South Asia Correlation:")
print(sa_corr)
print("\nMiddle East Correlation:")
print(me_corr)

# Scatter plots
fig, axes = plt.subplots(2, 2, figsize=(12, 10))
sns.scatterplot(data=South_asian, x="Freedom to make life choices", y="score", ax=axes[0, 0])
sns.scatterplot(data=South_asian, x="Generosity", y="score", ax=axes[0, 1])
sns.scatterplot(data=Middle_east, x="Freedom to make life choices", y="score", ax=axes[1, 0])
sns.scatterplot(data=Middle_east, x="Generosity", y="score", ax=axes[1, 1])

axes[0, 0].set_title("South Asia - Freedom vs Score")
axes[0, 1].set_title("South Asia - Generosity vs Score")
axes[1, 0].set_title("Middle East - Freedom vs Score")
axes[1, 1].set_title("Middle East - Generosity vs Score")
plt.tight_layout()
plt.show()

# Outlier detection (using IQR method)
def find_outliers(data, column):
    Q1 = data[column].quantile(0.25)
    Q3 = data[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return data[(data[column] < lower_bound) | (data[column] > upper_bound)]

sa_outliers = find_outliers(South_asian, "score")
me_outliers = find_outliers(Middle_east, "score")

print("South Asia Outliers:")
print(sa_outliers)
print("\nMiddle East Outliers:")
print(me_outliers)

# visualizations
import matplotlib.pyplot as plt
import seaborn as sns

# Combine data into a single DataFrame for easier comparison
South_asian['Region'] = 'South Asia'
Middle_east['Region'] = 'Middle East'

combined_df = pd.concat([South_asian, Middle_east], ignore_index=True)
# Create boxplots
plt.figure(figsize=(10, 6))
sns.boxplot(x='Region', y='score', data=combined_df
            )
# Add titles and labels
plt.title('Distribution of Scores: South Asia vs. Middle East', fontsize=14)
plt.xlabel('Region', fontsize=12)
plt.ylabel('Score', fontsize=12)

# Show the plot
plt.tight_layout()
plt.show()